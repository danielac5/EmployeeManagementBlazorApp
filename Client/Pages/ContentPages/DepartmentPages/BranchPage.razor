@implements IDisposable

@if (allState.ShowBranch)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Filiale</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"> </i> Adaugă filială
                        </button>
                    </div>

                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">ID</th>
                                        <th scope="col">Departament</th>
                                        <th scope="col">Filială</th>
                                        <th scope="col">Opțiuni</th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @if (Branches is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Branches)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Department!.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">Nici o filială nu a fost adăugată</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<BranchDialog @ref="branchDialog"
              HandleSaveOperationEvent="HandleSaveOperationEvent"
              Branch="Branch"
              Departments="Departments" />

@code {
    public string Title { get; set; } = "Adaugă";
    BranchDialog? branchDialog;
    Branch Branch = new();
    public List<Department> Departments { get; set; } = new();
    public List<Branch> Branches { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetBranches();
        await GetDepartments();
        allState.Action += StateHasChanged;
    }

    private async Task GetBranches()
    {
        Branches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
    }

    void AddButtonClicked()
    {
        branchDialog?.ChangeTitle("Adaugă");
        Branch = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        branchDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(Branch branch)
    {
        bool successCheck = false;
        if (Branch.Id > 0)
        {
            var result = await branchService.Update(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await branchService.Insert(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            Branch = new();
            await GetBranches();
            branchDialog?.ChangeTitle("Adaugă");
        }
    }


    private void EditClicked(Branch bran)
    {
        branchDialog?.ChangeTitle("Update");
        Branch = bran;
        OpenDialog();
    }

    private async Task DeleteClicked(Branch bran)
    {
        bool confirm = await dialogService.ConfirmAsync($"Ștergi {bran.Name}?", "Confirmă ștergerea");
        if (!confirm) return;

        var response = await branchService.DeleteById(bran.Id, Constants.BranchBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetBranches();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Succes!"); 
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Eroare bleati!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
