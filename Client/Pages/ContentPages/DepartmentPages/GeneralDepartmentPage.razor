@using BaseLibrary.Entities
@using Client.ApplicationStates
@using ClientCommon.Helpers
@implements IDisposable

@inject AllState departmentState

@if (allState.ShowGeneralDepartment)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="card">
                <div class="card-header">
                    <h4 class="float-start">Departament general</h4>
                    <button class="btn btn-outline-success float-end" @onclick="OpenDialog">
                        <i class="bi bi-plus-circle-dotted"></i>Adaugă departament
                    </button>
                </div>

                <div class="card-header" style="max-height: 580px; overflow-x:hidden; overflow-y:scroll;">
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">ID</th>
                                    <th scope="col">Departament General</th>
                                    <th scope="col">Opțiuni</th>
                                </tr>
                            </thead>

                            <tbody>
                                @if (GeneralDepartments is not null)
                                {
                                    int count = 1;
                                    foreach (var item in GeneralDepartments)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Name</td>
                                            <td>

                                                <i class="bi bi-pencil text-info" id="cursorStyle"
                                                   @onclick="()=>EditClicked(item)"></i>

                                                <i class="bi bi-trash text-danger" id="cursorStyle"
                                                   @onclick="() => DeleteClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4"><div class="alert alert-info text-center">Nici un Department General adăugat</div></td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

<GeneralDepartmentDialog @ref="generalDepartmentDialog"
                         HandleSaveOperationEvent="HandleSaveOperationEvent"
                         GeneralDepartment="GeneralDepartment" />

@code {
    GeneralDepartmentDialog? generalDepartmentDialog;
    GeneralDepartment GeneralDepartment = new();
    public string Title { get; set; } = "Adaugă";
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetGeneralDepartments();
        allState.Action += StateHasChanged;
    }

    private async Task GetGeneralDepartments()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
    }

    void OpenDialog()
    {
        generalDepartmentDialog?.OpenDialog();
    }

    //add or update
    private async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
    {
        bool successCheck = false;
        if (generalDepartment.Id > 0)
        {
            var result = await generalDepartmentService
            .Update(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await generalDepartmentService
            .Insert(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            GeneralDepartment = new();
            await GetGeneralDepartments();
            generalDepartmentDialog?.ChangeTitle("Adaugă");
        }
    }

    //edit
    private void EditClicked(GeneralDepartment dep)
    {
        generalDepartmentDialog?.ChangeTitle("Update");
        GeneralDepartment = dep;
        OpenDialog();
    }


    //delete
    private async Task DeleteClicked(GeneralDepartment dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Ștergeți {dep.Name}?", "Confirmă ștergerea"); 
        if (!confirm) return;

        var response = await generalDepartmentService.DeleteById(dep.Id, Constants.GeneralDepartmentBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetGeneralDepartments();
    }


    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Succes"); return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Eroare"); return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}